# generated by fastapi-codegen:
#   filename:  openapi.yaml
#   timestamp: 2025-06-28T18:24:30+00:00



import argparse
import json
import os
from typing import *
from typing import Optional

from autogen.mcp.mcp_proxy import MCPProxy
from autogen.mcp.mcp_proxy.security import BaseSecurity
from fastapi import Query

from models import (
    CountryAllGetResponse,
    CountryCodeGetResponse,
    CountryGetResponse,
    DateFormat,
    Format,
    HelpCountriesGetResponse,
    ReportCountryAllGetResponse,
    ReportCountryCodeGetResponse,
    ReportCountryNameGetResponse,
    ReportTotalsGetResponse,
    TotalsGetResponse,
)

app = MCPProxy(
    title='COVID-19 data API',
    version='1.2.6',
)


@app.get(
    '/country',
    description=""" Get latest data for specific country. Country name and format are in parametars. """,
    tags=['country_info_fetching', 'country_metrics_handling'],
)
def get_latest_country_data_by_name(name: str, format: Optional[Format] = 'json'):
    """
    getLatestCountryDataByName
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/country/all',
    description=""" Get latest data from all countries. """,
    tags=['country_info_fetching', 'country_metrics_handling'],
)
def get_latest_all_countries(format: Optional[Format] = 'json'):
    """
    getLatestAllCountries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/country/code',
    description=""" Get latest data for specific country. Country code and format are in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. """,
    tags=['country_info_fetching', 'country_metrics_handling'],
)
def get_latest_country_data_by_code(code: str, format: Optional[Format] = 'json'):
    """
    getLatestCountryDataByCode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/help/countries',
    description=""" Get name name, alpha-2, alpha-3 code, latitude and longitude for every country. """,
    tags=['country_info_fetching'],
)
def get_list_of_countries(format: Optional[Format] = 'json'):
    """
    getListOfCountries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/country/all',
    description=""" Get daily report for all countries. Date is mandatory parametar. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter. """,
    tags=['daily_report_creation', 'country_metrics_handling'],
)
def get_daily_report_all_countries(
    date: str,
    date_format: Optional[DateFormat] = Query('YYYY-MM-DD', alias='date-format'),
    format: Optional[Format] = 'json',
):
    """
    getDailyReportAllCountries
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/country/code',
    description=""" Get daily report for specific country. Country code and date are mandatory in parametars. Country code is in ISO 3166-1 standard. It can be 2 chars (Alpha-2) or 3 chars (Alpha-3) type. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter """,
    tags=['country_info_fetching', 'daily_report_creation'],
)
def get_daily_report_by_country_code(
    code: str,
    date: str = ...,
    date_format: Optional[DateFormat] = Query('YYYY-MM-DD', alias='date-format'),
    format: Optional[Format] = 'json',
):
    """
    getDailyReportByCountryCode
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/country/name',
    description=""" Get daily report for specific country. Country name and date are mandatory in parametars. Date format is by ISO 8601 standard, but you can provide different format with date-format parameter """,
    tags=['country_info_fetching', 'daily_report_creation', 'country_metrics_handling'],
)
def get_daily_report_by_country_name(
    name: str,
    date: str = ...,
    date_format: Optional[DateFormat] = Query('YYYY-MM-DD', alias='date-format'),
    format: Optional[Format] = 'json',
):
    """
    getDailyReportByCountryName
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/report/totals',
    description=""" Get daily report data for whole world. """,
    tags=['daily_report_creation', 'country_metrics_handling'],
)
def get_daily_report_totals(
    date: Optional[str] = None,
    date_format: Optional[DateFormat] = Query('YYYY-MM-DD', alias='date-format'),
    format: Optional[Format] = 'json',
):
    """
    getDailyReportTotals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


@app.get(
    '/totals',
    description=""" Get latest data for whole world. """,
    tags=['country_metrics_handling', 'daily_report_creation'],
)
def get_latest_totals(format: Optional[Format] = 'json'):
    """
    getLatestTotals
    """
    raise RuntimeError("Should be patched by MCPProxy and never executed")


if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="MCP Server")
    parser.add_argument(
        "transport",
        choices=["stdio", "sse", "streamable-http"],
        help="Transport mode (stdio, sse or streamable-http)",
    )
    args = parser.parse_args()

    if "CONFIG_PATH" in os.environ:
        config_path = os.environ["CONFIG_PATH"]
        app.load_configuration(config_path)

    if "CONFIG" in os.environ:
        config = os.environ["CONFIG"]
        app.load_configuration_from_string(config)

    if "SECURITY" in os.environ:
        security_params = BaseSecurity.parse_security_parameters_from_env(
            os.environ,
        )

        app.set_security_params(security_params)

    mcp_settings = json.loads(os.environ.get("MCP_SETTINGS", "{}"))

    app.get_mcp(**mcp_settings).run(transport=args.transport)
